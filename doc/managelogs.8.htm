Content-type: text/html

<HTML><HEAD><TITLE>Manpage of MANAGELOGS</TITLE>
</HEAD><BODY>
<H1>MANAGELOGS</H1>
Section: managelogs (8)<BR>Updated: May 2009<BR><A HREF="#index">Index</A>
<A HREF="http://localhost/cgi-bin/man/man2html">Return to Main Contents</A><HR>

<A NAME="lbAB">&nbsp;</A>
<H2>NAME</H2>

managelogs - Piped logging program to rotate/purge Apache logs
<A NAME="lbAC">&nbsp;</A>
<H2>SYNOPSIS</H2>

<B>managelogs</B>

 [ <I>options1</I> ] <I>&lt;base-path1&gt;</I> [[ <I>options2</I> ] <I>&lt;base-path2&gt;</I> ...]

<A NAME="lbAD">&nbsp;</A>
<H2>DESCRIPTION</H2>

<P>

managelogs is a log processing program to be used in conjunction with Apache's
piped logfile feature. It automatically rotates and purges log files based
on a set of user-defined options.
<P>

The primary idea behind managelogs was to provide an efficient protection
against 'log file system full' failures. Several log rotation programs exist in the
Apache world but, as  far as I know, none of them features an automatic purge
of old log files. An usual solution is to complement the log rotation
mechanism with cron-based purge operations. This approach is prone to a lot of
errors such as inadvertent inactivation of the cron job, inconsistencies between
the script and the Apache configuration (different paths...), errors
in the shell code, and others, most of them remaining undetected until a file
system full error causses an Apache crash. Such solutions also cannot ensure
that the file system does not fill up between two consecutive
purge operations.
<P>

managelogs implements a different approach, as it includes both the rotation
and purge mechanisms, providing a simpler and more reliable solution. Among
other benefits, it ensures that the size limits you define will never be
exceeded, even temporarily.
<P>

Here is a short list of manegelogs main features :
<DL COMPACT>
<DT><DD>
- Rotation on a file size limit,
<BR>

- Rotation on an external signal,
<BR>

- Can run an external command in background each time a rotation occurs
(useful for statistics gathering),
<BR>

- Purge log files based on a global size limit, a maximum number of log files,
or a combination of both,
<BR>

- Integrated on-the-fly compression,
<BR>

- Maintains symbolic links on log files (active and/or backup),
<BR>

- Can change its uid/gid to run as a given (non-root) user/group,
<BR>

- Ensures that rotations occur on line boundaries,
<BR>

- Maintains its state across stop/starts/restart operations
</DL>
<P>

A managelogs process continuously reads data from its standard input and
sends it to its
<I>log manager(s).</I>

A log manager can be considered as an output channel. Each log 
manager is defined
on the command line by a set of options followed by a path named
<I>base path</I>

, as this path is used as the base every subsequent file names are computed
from. Each set of '[ <I>options</I> ] <I>&lt;base-path&gt;</I>' arguments defines a
log manager.
<P>

There is no limit to the number of log managers a
managelogs process can handle. They all receive a copy of the data read from
the process' standard input and each one processes this data according to its
configuration.
<P>

Note: In most cases, and especially
during your first steps with managelogs, you will define only one log
manager, making no difference between the log manager and the managelogs process
it belongs to.
<P>

A log manager manages an
<I>active</I>

log file (the file it is currently writing into) and a set of
<I>backup</I>

log files.
<I>Backup</I>

log files are previous active log files which have been closed during a
<I>rotation.</I>

Every time the global limits
are exceeded, a
<I>purge</I>

operation takes place and the oldest backup file is deleted.
<P>

Each log manager also maintains a
<I>status file</I>

which, among other information, contains the paths of the active and backup log
files. Thanks to this file, a managelogs process can be stopped and restarted
without loosing its state. When a managelogs process is restarted, each log
manager recovers the state it was in when the process was previously stopped.
<P>

Note : unlike other log management programs like
rotatelogs, (re)starting the Apache server does not cause its managelogs
processes to switch to a new log file. The only way to force a file rotation
from the 'outside' is to send a SIGUSR1 signal to the managelogs process
(see SIGNALS).
<P>

Another difference with other usual log rotation programs is that several
processes cannot write to the same log file at the same time. A given
<I>base path</I>

must be privately owned and managed by only one log manager. If another program
writes to one of the files it maintains, the result is unpredictable.
The only exception to this rule is that backup log files can be deleted
(but not written to) at any time without disturbing the logic of the purge
engine.
<A NAME="lbAE">&nbsp;</A>
<H2>OPTIONS</H2>

<P>

---- Global options (these options apply to the whole managelogs process) :
<DL COMPACT>
<DT><B>-h</B>|<B>--help</B>

<DD>
Display the list of available options and exit
<DT><B>-V</B>|<B>--version</B>

<DD>
Print version and exit
<DT><B>-u</B>|<B>--user</B> <B></B><I>&lt;id&gt;</I>

<DD>
run with this user/group ID (usable only when the program is started
by the <I>root</I> user)
<BR>

<I>&lt;id&gt;</I> = <I>&lt;uid&gt;[:&lt;gid&gt;]</I>, where <I>&lt;uid&gt;</I> and <I>&lt;gid&gt;</I> are 
user/group names or numeric ids.
<DT><B>-I</B>|<B>--stats</B>

<DD>
Display internal statistics before exiting (used for troubleshooting, debugging,
or performance tests)
<DT><B>-R</B>|<B>--refresh-only</B>

<DD>
Just refresh/purge log files and exit
</DL>
<P>

---- Log manager options (apply to the next <I>&lt;base-path&gt;</I> only) :
<DL COMPACT>
<DT><B>-v</B>|<B>--verbose</B>

<DD>
Increment debug level (can be set more than once).
<DT><B>-d</B>|<B>--debug</B> <B></B><I>&lt;path&gt;</I>

<DD>
Write debug messages to <I>&lt;path&gt;</I>.
<BR>

Special values : the 'stdout' and 'stderr' strings respectively correspond to
the process' standard output and standard error streams.
<BR>

Default : if this option is not present, debug messages go to stderr.
<DT><B>-c</B>|<B>--compress</B> <B></B><I>&lt;comp&gt;[:&lt;level&gt;]</I>

<DD>
Activate compression and append the corresponding suffix to the log file names.
<BR>

<I>&lt;comp&gt;</I> is one of <B>gz</B> or <B>bz2</B> (this is also the value of the
appended suffix).
<BR>

<I>&lt;level&gt;</I> is one of {1|2|3|4|5|6|7|8|9|best|fast}
<BR>

The default compression level depends on the compression engine.
<BR>

If this option is not present, the output flow is not compressed.
<DT><B>-s</B>|<B>--size</B> <B></B><I>&lt;size&gt;</I>

<DD>
Sets the log file size at which rotation occurs.
<BR>

<I>&lt;size&gt;</I> is a numeric value
optionnally followed by a unit : <B>K</B> (Kilobytes), <B>M</B> (Megabytes), or
<B>G</B> (Gigabytes).
<BR>

Default: no limit
<BR>

Note that the size we set here is the size the file takes on disk. If compression
is on, the limit is checked against the compressed size.
<DT><B>-S</B>|<B>--global-size</B> <B></B><I>&lt;size&gt;</I>

<DD>
Sets the maximum size that the managed log files (active + backup) can take on
disk. As soon as this size is exceeded, a purge occurs (the oldest backup file
is removed).
<BR>

Argument: same format as for '--size'. If this option is set and the '--size'
option is not, the individual file limit is implicitely set to 1/2 of
the global limit (so that the directory always contains one backup
file).
<BR>

Default : no global limit
<DT><B>-m</B>|<B>--mode</B> <B></B><I>&lt;mode&gt;</I>

<DD>
File permissions to apply to newly-created log files.
<BR>

<I>&lt;mode&gt;</I> is a numeric Unix-style file permission (see <A HREF="http://localhost/cgi-bin/man/man2html?1+chmod">chmod</A>(1) for more).
<BR>

Default mode: 644
<DT><B>-k</B>|<B>--keep</B> <B></B><I>&lt;n&gt;</I>

<DD>
Keep only <I>&lt;n&gt;</I> log files (the active one + <I>&lt;n-1&gt;</I> backups). This
option is an alternative to the '--global-size' option, but it can also be
used in conjunction, especially if you send signals to trigger rotations
before the size limit is reached. When this option is set along with a
global size limit, the first condition to be met triggers the purge. 
<DT><B>-l</B>|<B>--link</B>

<DD>
Maintain a link file (named <I>&lt;base-path&gt;</I>) to the active log file. The '-H'
option allows to choose between hard or symbolic links.
<DT><B>-L</B>|<B>--backup-links</B>

<DD>
Also maintain links to the backup log files (backup links are named
<I>&lt;base-path&gt;.{1,2,...}</I>, most recent first)
<DT><B>-H</B>|<B>--hardlink</B>

<DD>
Create hard links instead of symbolic links.
<DT><B>-e</B>|<B>--ignore-eol</B>

<DD>
By default, managelogs ensures that log file rotation occurs on line boundaries,
so that every log files contain entire lines. This option disables this
buffering mechanism.
<DT><B>-C</B>|<B>--rotate-cmd</B> <B></B><I>&lt;cmd&gt;</I>

<DD>
Run this command in background each time a rotation occurs.
<BR>

<I>&lt;cmd&gt;</I> is a command line in Bourne shell format and can contain arguments,
separated by spaces and tabs. If <I>&lt;cmd&gt;</I> contains spaces or tabs, it must
be enclosed between quotes, so that it is considered as a single managelogs
argument.
<BR>

managelogs sets several environment variables before launching <I>&lt;cmd&gt;</I>.
These variables can be used in the <I>&lt;cmd&gt;</I> string itself, but also in the
script or binary program launched by the command.
<BR>

See 'ROTATE COMMAND' below for more.
<DT><B>-x</B>|<B>--enospc-abort</B>

<DD>
Exit on 'file system full' errors.
<BR>

The default is to ignore such errors when trying to write data to a log file,so
that the underlying service (typically Apache) is kept running as long as
possible. The drawback is that, when it happens, data that cannot be written is
silently discarded.
Setting this option inhibits the default 'permissive' behavior and causes the
program to abort on 'file system full' errors.
</DL>
<A NAME="lbAF">&nbsp;</A>
<H2>FILES</H2>

Each log manager maintains its own set of files. The files are named after the
log manager's base path. They all reside in the same directory (the directory
part of the base path). This directory must exist before managelogs is started.
It must also be writable by the user managelogs is running as.
<P>

Here are the files that a log manager creates and maintains :
<DL COMPACT>
<DT>&lt;base-path&gt;.pid<DD>
This file is present when a process is currently managing this base path. It
contains
the pid of the managelogs process. This is the file to read to know who to send
signals to. When the process exits, the pid file is removed.
<DT>&lt;base-path&gt;.status<DD>
The status file. As described above, this file allows a log manager to recover
its previous state at start time. This way, the memory of active and backup
files is kept.
<DT>&lt;base-path&gt;._<I>&lt;xxxxxxxx&gt;</I>[.gz|.bz2]<DD>
A log file. The <I>&lt;xxxxxxxx&gt;</I> part of the name is a unique identifier
computed
by the log manager when the file is created. When several log files are present,
their alphabetical order always corresponds to their creation time chronological
order. So, when you list a directory in
alphabetical order (ls -l), the oldest backup
log file comes first, and the active log
file comes last. And a command like 'cat &lt;base-path&gt;._*' displays the
whole log data in chronological order.
<BR>

When compression is turned on, the log manager automatically appends the
compression type to the file name.
<DT>&lt;base-path&gt;<DD>
If the '--link' option is set for this log manager, it maintains a link
from &lt;base-path&gt; to the active log file. By default, it is a symbolic link,
but the '--hardlink' option allows to use hard links.
<DT>&lt;base-path&gt;.{1,2,...}<DD>
These are also links, but to the backup log files. They are created and
maintained only if the '--backup-links' option was set. The files are numbered
in reverse chhronological order : &lt;base-path&gt;.1 is the most recent backup,
&lt;base-path&gt;.2 is the previous one...
</DL>
<A NAME="lbAG">&nbsp;</A>
<H2>SIGNALS</H2>

<DL COMPACT>
<DT><B>SIGUSR1</B>

<DD>
This signal triggers an immediate rotation on every log managers attached to
the managelogs process. Note that, if the '--keep' option is set, and if the
maximum number of log files is exceeded, a purge will occur. 
<DT><B>SIGUSR2</B>

<DD>
This signal causes every log managers to flush to disk the data they may
have in memory. This is useful only for compressed streams, as compressed files
cannot be read before such a flush operation is done. This is due to the fact
that a compressed file must contain a trailer block to be valid. As long
as the compression engine processes the data, this trailer block is not
written and, if you try to read the compressed data from the file, it is
considered as invalid. When you send a SIGUSR2 to the process, the compression
engine flushes the data it currently has in memory, writes the corresponding
trailer data to the file, and starts a new block. Then, you can uncompress
the data from the compreessed file. Note that this flush operation adds about
16 bytes to the log file, so it shouldn't be done too often.
</DL>
<A NAME="lbAH">&nbsp;</A>
<H2>ROTATE COMMAND</H2>

Every time managelogs decides to switch to a new log file, whatever reason it
may have for this, an external command can be executed. This is what we call
<I>rotate command.</I>

This command is set via an option on the managelogs command line.
It is a command in shell format, which
can contain arguments, separated by spaces or tabs. If the command contains
arguments, it must be enclosed between quotes, so that it is seen as a single
managelogs argument.
<P>

managelogs runs the command in background, ignoring its return code. So, there
is no limit to the time the command may run, as managelogs does not wait
for its completion to keep on processing the log data.
<P>

Before launching the rotate command, managelogs sets several environment
variables that can be used, either in the command string (prefixed with a $
sign), or from within the script or program run by the command:
<DL COMPACT>
<DT><B>LOGMANAGER_FILE_PATH</B>

<DD>
The path to the log file managelogs just closed. In a statistics gathering
scenario, the data to integrate will be read from this file.
<DT><B>LOGMANAGER_BASE_PATH</B>

<DD>
This is the
<I>base path</I>

associated with this log manager.
<DT><B>LOGMANAGER_ROOT_DIR</B>

<DD>
This is the directory part of the
<I>base path</I>

<DT><B>LOGMANAGER_COMPRESSION</B>

<DD>
This is the compression type used to write to the log file. If compression
is off, contains an empty string.
<DT><B>LOGMANAGER_VERSION</B>

<DD>
The version of the log manager library.
</DL>
<P>

Note : During its execution, the rotate command is allowed to delete the
file pointed by $LOGMANAGER_FILE_PATH. You may do it, for instance, if you just
want some statistics without the detailed logs.
<A NAME="lbAI">&nbsp;</A>
<H2>EXAMPLES</H2>

<P>

Say we want to keep the last 3 Mbytes of access_log data in &lt;apache-dir&gt;/logs,
each log file will take at most 1 Mbyte, and we want to maintain a symbolic
link to the active and backup log files.
<P>

The corresponding configuration line looks like :
<P>

CustomLog &quot;| &lt;apache_dir&gt;/bin/managelogs --size 1M --global-size 3M --link --backup-links &lt;apache_dir&gt;/logs/access_log&quot; combined
<P>

Here is a typical list of files present in the &lt;apache-dir&gt;/logs directory with
such a configuration :
<PRE>
# ls -l $apache_dir/logs/access_log*
...
lrwxrwxrwx 1 root root      20 Mar 17 15:16 access_log -&gt; access_log._49BFB0A2
lrwxrwxrwx 1 root root      20 Mar 17 15:16 access_log.1 -&gt; access_log._49BF8366
lrwxrwxrwx 1 root root      20 Mar 17 15:16 access_log.2 -&gt; access_log._49BF2522
-rw-r--r-- 1 root root 1048564 Mar  5 12:34 access_log._49BF2522
-rw-r--r-- 1 root root 1048543 Mar 17 15:16 access_log._49BF8366
-rw-r--r-- 1 root root  483328 Mar 19 07:05 access_log._49BFB0A2
-rw-r--r-- 1 root root       6 Feb 22 08:30 access_log.pid
-rw-r--r-- 1 root root     321 Mar 17 15:16 access_log.status
</PRE>

<DL COMPACT>
<DT>In this list you can see (in alphabetical order) :<DD>
- The symbolic link to the active log file
<BR>

- The 2 symbolic links to the 2 backup log files
<BR>

- The 2 backup log files (in chronological order)
<BR>

- The active log file
<BR>

- The pid file
<BR>

- The status file
</DL>
<P>

Now, something more complex : we want to keep 3 Mbytes of uncompressed log
data
to be used by the 1st-level support team, as in the previous example, and we
also need to archive a bigger amount of data for 2nd-level analysis,
security, compliance, or any other need. This archived data will be compressed,
as it allows to save a lot of space (about 95 %).
<P>

The corresponding directive looks like :
<P>

CustomLog &quot;| &lt;apache_dir&gt;/bin/managelogs --size 1M --global-size 3M --link --backup-links &lt;apache_dir&gt;/logs/access_log --size 100M --global-size 1G --compression bz2:best /archives/logs/access_log&quot; combined
<P>

With such a configuration, the files in the &lt;apache_dir&gt;/logs directory will
be the same  as in the previous example, but managelogs will also maintain the
most recent 1 Gbytes of compressed access_log data in /archives/logs (in
chunks of 100 Mbytes). This way, we have two levels of access to the log
data : the most recent data is easily accessible and, when we need to examine
something older, it is less easy, but the retention size is much bigger.
<P>

Now, if we want to force an immediate rotation of these log files, whatever
reason we may have for this, the command to use is :
<P>

kill -USR1 `cat &lt;apache_dir&gt;/logs/access_log.pid`
<P>

Note that we could also have used '/archives/logs/access_log.pid', as both pid
files contain the same. This signal will trigger a rotation in both directories.
<P>

Here is a typical example of using a rotate command : the options below cause
the log data to be integrated into an AWStats database each time a rotation
occurs :
<P>

CustomLog &quot;| &lt;apache_dir&gt;/bin/managelogs --size 100k --global-size 1M --rotate-cmd 'perl &lt;awstat-dir&gt;/awstats.pl -config=&lt;mysite&gt; -update -LogFile=$LOGMANAGER_FILE_PATH' &lt;apache_dir&gt;/logs/access_log&quot; combined
<P>

In order to ensure that statistics are integrated at least once per day, this
configuration can be complemented with a cron job like this one :
<P>

0 0 * * * kill -USR1 `cat &lt;apache_dir&gt;/logs/access_log.pid`
<P>

which causes a rotation to occur every night at midnight.
<A NAME="lbAJ">&nbsp;</A>
<H2>SEE ALSO</H2>

<P>

the managelogs web site : <A HREF="http://managelogs.tekwire.net">http://managelogs.tekwire.net</A>
<A NAME="lbAK">&nbsp;</A>
<H2>AUTHOR</H2>

<P>

Francois Laupretre &lt;<A HREF="mailto:francois@tekwire.net">francois@tekwire.net</A>&gt;
<A NAME="lbAL">&nbsp;</A>
<H2>LICENSE</H2>

<P>

Apache license, Version 2.0 &lt;<A HREF="http://www.apache.org/licenses/">http://www.apache.org/licenses/</A>&gt;
<A NAME="lbAM">&nbsp;</A>
<H2>BUGS</H2>

<P>

Please send bug reports to &lt;<A HREF="mailto:managelogs-bugs@tekwire.net">managelogs-bugs@tekwire.net</A>&gt;
<P>

<HR>
<A NAME="index">&nbsp;</A><H2>Index</H2>
<DL>
<DT><A HREF="#lbAB">NAME</A><DD>
<DT><A HREF="#lbAC">SYNOPSIS</A><DD>
<DT><A HREF="#lbAD">DESCRIPTION</A><DD>
<DT><A HREF="#lbAE">OPTIONS</A><DD>
<DT><A HREF="#lbAF">FILES</A><DD>
<DT><A HREF="#lbAG">SIGNALS</A><DD>
<DT><A HREF="#lbAH">ROTATE COMMAND</A><DD>
<DT><A HREF="#lbAI">EXAMPLES</A><DD>
<DT><A HREF="#lbAJ">SEE ALSO</A><DD>
<DT><A HREF="#lbAK">AUTHOR</A><DD>
<DT><A HREF="#lbAL">LICENSE</A><DD>
<DT><A HREF="#lbAM">BUGS</A><DD>
</DL>
<HR>
This document was created by
<A HREF="http://localhost/cgi-bin/man/man2html">man2html</A>,
using the manual pages.<BR>
Time: 16:26:03 GMT, January 25, 2010
</BODY>
</HTML>
